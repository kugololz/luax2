
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftLTLEGTGEEQNEleftCONCATleftPLUSMINUSleftTIMESDIVIDEMODrightPOWERrightUNARYAND ASSIGN BREAK COLON COMMA CONCAT DIVIDE DO DOT ELLIPSIS ELSE ELSEIF END EQ FALSE FOR FUNCTION GE GT IF IN LBRACE LBRACK LE LEN LOCAL LPAREN LT MINUS MOD NAME NE NIL NOT NUMBER OR PLUS POWER PRINT RBRACE RBRACK REPEAT RETURN RPAREN SEMI STRING THEN TIMES TRUE UNTIL WHILEchunk : statlist\n             | statlist laststatstatlist : statlist stat SEMI\n                | statlist stat\n                | emptystat : varlist ASSIGN explist\n            | functioncall\n            | DO block END\n            | WHILE exp DO block END\n            | REPEAT block UNTIL exp\n            | IF exp THEN block elseiflist opt_else END\n            | FOR NAME ASSIGN exp COMMA exp opt_comma_exp DO block END\n            | FOR namelist IN explist DO block END\n            | FUNCTION funcname funcbody\n            | LOCAL FUNCTION NAME funcbody\n            | LOCAL namelist opt_assignlaststat : RETURN opt_explist\n                | BREAKfuncname : NAME nameparts opt_colon_namevarlist : var varlist_tailvarlist_tail : COMMA var varlist_tail\n                    | emptyvar : NAME\n           | prefixexp LBRACK exp RBRACK\n           | prefixexp DOT NAMEfunctioncall : NAME LPAREN opt_explist RPAREN\n                    | prefixexp COLON NAME argsargs : LPAREN opt_explist RPAREN\n            | tableconstructor\n            | STRINGnamelist : NAME namelist_tailnamelist_tail : COMMA NAME namelist_tail\n                     | emptyexplist : exp exp_tailexp_tail : COMMA exp exp_tail\n                | emptyexp : NIL\n           | FALSE\n           | TRUE\n           | NUMBER\n           | STRING\n           | ELLIPSIS\n           | function\n           | prefixexp\n           | tableconstructor\n           | exp binop exp\n           | unop expprefixexp : var\n                 | functioncall\n                 | LPAREN exp RPARENfunction : FUNCTION funcbodyfuncbody : LPAREN opt_parlist RPAREN block ENDparlist : namelist opt_comma_ellipsis\n               | ELLIPSIStableconstructor : LBRACE opt_fieldlist RBRACEfieldlist : field field_tailfield_tail : fieldsep field field_tail\n                  | emptyfield : LBRACK exp RBRACK ASSIGN exp\n             | NAME ASSIGN exp\n             | expfieldsep : COMMA\n                | SEMIbinop : PLUS\n             | MINUS\n             | TIMES\n             | DIVIDE\n             | POWER\n             | MOD\n             | CONCAT\n             | LT\n             | LE\n             | GT\n             | GE\n             | EQ\n             | NE\n             | AND\n             | ORunop : MINUS %prec UNARY\n            | NOT %prec UNARY\n            | LEN %prec UNARYopt_explist : explist\n                   | emptyopt_comma_exp : COMMA exp\n                     | emptyopt_assign : ASSIGN explist\n                  | emptyopt_fieldlist : fieldlist\n                     | emptyopt_parlist : parlist\n                   | emptyopt_else : ELSE block\n                | emptyopt_comma_ellipsis : COMMA ELLIPSIS\n                          | emptyelseiflist : elseiflist ELSEIF exp THEN block\n                  | emptynameparts : DOT NAME nameparts\n                 | emptyopt_colon_name : COLON NAME\n                      | emptyblock : chunkempty :'
    
_lr_action_items = {'RETURN':([0,2,3,5,9,10,12,21,25,26,27,28,29,30,31,32,33,34,37,38,43,56,57,65,68,84,85,94,95,96,98,101,102,105,110,112,115,118,119,120,126,135,138,140,145,146,148,150,151,152,153,154,161,165,166,176,180,181,183,189,190,192,195,],[-103,6,-5,-4,-7,-103,-103,-3,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,-103,-103,-34,-36,-47,-51,-6,-8,-103,-103,-31,-33,-14,-16,-87,-50,-25,-46,-103,-55,-10,-103,-26,-15,-86,-27,-29,-30,-24,-35,-103,-9,-32,-103,-103,-28,-52,-11,-13,-103,-103,-12,]),'BREAK':([0,2,3,5,9,10,12,21,25,26,27,28,29,30,31,32,33,34,37,38,43,56,57,65,68,84,85,94,95,96,98,101,102,105,110,112,115,118,119,120,126,135,138,140,145,146,148,150,151,152,153,154,161,165,166,176,180,181,183,189,190,192,195,],[-103,7,-5,-4,-7,-103,-103,-3,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,-103,-103,-34,-36,-47,-51,-6,-8,-103,-103,-31,-33,-14,-16,-87,-50,-25,-46,-103,-55,-10,-103,-26,-15,-86,-27,-29,-30,-24,-35,-103,-9,-32,-103,-103,-28,-52,-11,-13,-103,-103,-12,]),'DO':([0,2,3,5,9,10,12,21,25,26,27,28,29,30,31,32,33,34,37,38,43,47,56,57,65,68,84,85,94,95,96,98,101,102,105,110,112,115,118,119,120,126,135,138,139,140,145,146,148,150,151,152,153,154,161,165,166,176,178,180,181,183,187,188,189,190,191,192,195,],[-103,10,-5,-4,-7,-103,-103,-3,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,96,-103,-103,-34,-36,-47,-51,-6,-8,-103,-103,-31,-33,-14,-16,-87,-50,-25,-46,-103,-55,-10,-103,166,-26,-15,-86,-27,-29,-30,-24,-35,-103,-9,-32,-103,-103,-103,-28,-52,-11,192,-85,-13,-103,-84,-103,-12,]),'WHILE':([0,2,3,5,9,10,12,21,25,26,27,28,29,30,31,32,33,34,37,38,43,56,57,65,68,84,85,94,95,96,98,101,102,105,110,112,115,118,119,120,126,135,138,140,145,146,148,150,151,152,153,154,161,165,166,176,180,181,183,189,190,192,195,],[-103,11,-5,-4,-7,-103,-103,-3,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,-103,-103,-34,-36,-47,-51,-6,-8,-103,-103,-31,-33,-14,-16,-87,-50,-25,-46,-103,-55,-10,-103,-26,-15,-86,-27,-29,-30,-24,-35,-103,-9,-32,-103,-103,-28,-52,-11,-13,-103,-103,-12,]),'REPEAT':([0,2,3,5,9,10,12,21,25,26,27,28,29,30,31,32,33,34,37,38,43,56,57,65,68,84,85,94,95,96,98,101,102,105,110,112,115,118,119,120,126,135,138,140,145,146,148,150,151,152,153,154,161,165,166,176,180,181,183,189,190,192,195,],[-103,12,-5,-4,-7,-103,-103,-3,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,-103,-103,-34,-36,-47,-51,-6,-8,-103,-103,-31,-33,-14,-16,-87,-50,-25,-46,-103,-55,-10,-103,-26,-15,-86,-27,-29,-30,-24,-35,-103,-9,-32,-103,-103,-28,-52,-11,-13,-103,-103,-12,]),'IF':([0,2,3,5,9,10,12,21,25,26,27,28,29,30,31,32,33,34,37,38,43,56,57,65,68,84,85,94,95,96,98,101,102,105,110,112,115,118,119,120,126,135,138,140,145,146,148,150,151,152,153,154,161,165,166,176,180,181,183,189,190,192,195,],[-103,13,-5,-4,-7,-103,-103,-3,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,-103,-103,-34,-36,-47,-51,-6,-8,-103,-103,-31,-33,-14,-16,-87,-50,-25,-46,-103,-55,-10,-103,-26,-15,-86,-27,-29,-30,-24,-35,-103,-9,-32,-103,-103,-28,-52,-11,-13,-103,-103,-12,]),'FOR':([0,2,3,5,9,10,12,21,25,26,27,28,29,30,31,32,33,34,37,38,43,56,57,65,68,84,85,94,95,96,98,101,102,105,110,112,115,118,119,120,126,135,138,140,145,146,148,150,151,152,153,154,161,165,166,176,180,181,183,189,190,192,195,],[-103,14,-5,-4,-7,-103,-103,-3,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,-103,-103,-34,-36,-47,-51,-6,-8,-103,-103,-31,-33,-14,-16,-87,-50,-25,-46,-103,-55,-10,-103,-26,-15,-86,-27,-29,-30,-24,-35,-103,-9,-32,-103,-103,-28,-52,-11,-13,-103,-103,-12,]),'FUNCTION':([0,2,3,5,6,9,10,11,12,13,17,19,21,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,52,56,57,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,94,95,96,97,98,99,101,102,103,105,110,111,112,115,118,119,120,126,128,130,131,133,135,138,140,145,146,148,149,150,151,152,153,154,161,164,165,166,173,175,176,180,181,183,186,189,190,192,195,],[-103,16,-5,-4,36,-7,-103,36,-103,36,55,36,-3,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,36,-48,-49,36,-79,-80,-81,-23,36,36,-103,-103,36,-34,36,36,-36,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-47,-51,36,-6,-8,-103,36,-103,36,-31,-33,36,-14,-16,36,-87,-50,-25,-46,-103,-55,36,-62,-63,36,-10,-103,-26,-15,-86,-27,36,-29,-30,-24,-35,-103,-9,36,-32,-103,36,36,-103,-28,-52,-11,36,-13,-103,-103,-12,]),'LOCAL':([0,2,3,5,9,10,12,21,25,26,27,28,29,30,31,32,33,34,37,38,43,56,57,65,68,84,85,94,95,96,98,101,102,105,110,112,115,118,119,120,126,135,138,140,145,146,148,150,151,152,153,154,161,165,166,176,180,181,183,189,190,192,195,],[-103,17,-5,-4,-7,-103,-103,-3,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,-103,-103,-34,-36,-47,-51,-6,-8,-103,-103,-31,-33,-14,-16,-87,-50,-25,-46,-103,-55,-10,-103,-26,-15,-86,-27,-29,-30,-24,-35,-103,-9,-32,-103,-103,-28,-52,-11,-13,-103,-103,-12,]),'NAME':([0,2,3,5,6,9,10,11,12,13,14,16,17,19,21,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,52,55,56,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,91,94,95,96,97,98,99,100,101,102,103,105,107,110,111,112,115,118,119,120,126,128,130,131,133,135,138,140,142,145,146,148,149,150,151,152,153,154,161,164,165,166,173,175,176,180,181,183,186,189,190,192,195,],[-103,15,-5,-4,43,-7,-103,43,-103,43,50,54,56,43,-3,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,43,-48,-49,93,-79,-80,-81,-23,43,43,109,-103,-103,43,116,43,118,-34,43,43,-36,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-47,-51,56,43,-6,-8,-103,43,-103,43,138,-31,-33,43,-14,144,-16,43,-87,-50,-25,-46,-103,-55,93,-62,-63,43,-10,-103,-26,167,-15,-86,-27,43,-29,-30,-24,-35,-103,-9,43,-32,-103,43,43,-103,-28,-52,-11,43,-13,-103,-103,-12,]),'LPAREN':([0,2,3,5,6,9,10,11,12,13,15,19,21,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,52,53,54,56,57,59,63,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,93,94,95,96,97,98,99,101,102,103,105,106,108,109,110,111,112,115,116,118,119,120,126,128,130,131,133,135,138,140,141,143,144,145,146,148,149,150,151,152,153,154,161,164,165,166,167,168,173,175,176,180,181,183,186,189,190,192,195,],[-103,19,-5,-4,19,-7,-103,19,-103,19,52,19,-3,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,19,86,-48,-49,19,-79,-80,-81,52,19,19,86,-103,-103,-103,19,19,-34,19,19,-36,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,-47,-51,19,52,-6,-8,-103,19,-103,19,-31,-33,19,-14,-103,-99,86,-16,19,-87,-50,149,-25,-46,-103,-55,19,-62,-63,19,-10,-103,-26,-19,-101,-103,-15,-86,-27,19,-29,-30,-24,-35,-103,-9,19,-32,-103,-100,-98,19,19,-103,-28,-52,-11,19,-13,-103,-103,-12,]),'$end':([0,1,2,3,4,5,6,7,9,21,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,43,56,57,65,68,84,85,94,95,101,102,105,110,112,115,118,119,120,126,135,138,140,145,146,148,150,151,152,153,161,165,180,181,183,189,195,],[-103,0,-1,-5,-2,-4,-103,-18,-7,-3,-17,-82,-83,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,-103,-103,-34,-36,-47,-51,-6,-8,-31,-33,-14,-16,-87,-50,-25,-46,-103,-55,-10,-103,-26,-15,-86,-27,-29,-30,-24,-35,-9,-32,-28,-52,-11,-13,-12,]),'END':([2,3,4,5,6,7,9,10,21,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,43,45,46,56,57,65,68,84,85,94,95,96,98,101,102,105,110,112,115,118,119,120,126,134,135,136,138,140,145,146,148,150,151,152,153,154,161,162,163,165,166,170,174,176,177,179,180,181,183,185,189,190,192,193,194,195,],[-1,-5,-2,-4,-103,-18,-7,-103,-3,-17,-82,-83,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,95,-102,-103,-103,-34,-36,-47,-51,-6,-8,-103,-103,-31,-33,-14,-16,-87,-50,-25,-46,-103,-55,161,-10,-103,-103,-26,-15,-86,-27,-29,-30,-24,-35,-103,-9,-103,-97,-32,-103,181,183,-103,-93,189,-28,-52,-11,-92,-13,-103,-103,-96,195,-12,]),'UNTIL':([2,3,4,5,6,7,9,12,21,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,43,46,48,56,57,65,68,84,85,94,95,101,102,105,110,112,115,118,119,120,126,135,138,140,145,146,148,150,151,152,153,161,165,180,181,183,189,195,],[-1,-5,-2,-4,-103,-18,-7,-103,-3,-17,-82,-83,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,-102,97,-103,-103,-34,-36,-47,-51,-6,-8,-31,-33,-14,-16,-87,-50,-25,-46,-103,-55,-10,-103,-26,-15,-86,-27,-29,-30,-24,-35,-9,-32,-28,-52,-11,-13,-12,]),'ELSEIF':([2,3,4,5,6,7,9,21,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,43,46,56,57,65,68,84,85,94,95,98,101,102,105,110,112,115,118,119,120,126,135,136,138,140,145,146,148,150,151,152,153,161,162,163,165,180,181,183,189,190,193,195,],[-1,-5,-2,-4,-103,-18,-7,-3,-17,-82,-83,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,-102,-103,-103,-34,-36,-47,-51,-6,-8,-103,-31,-33,-14,-16,-87,-50,-25,-46,-103,-55,-10,-103,-103,-26,-15,-86,-27,-29,-30,-24,-35,-9,175,-97,-32,-28,-52,-11,-13,-103,-96,-12,]),'ELSE':([2,3,4,5,6,7,9,21,22,23,24,25,26,27,28,29,30,31,32,33,34,37,38,43,46,56,57,65,68,84,85,94,95,98,101,102,105,110,112,115,118,119,120,126,135,136,138,140,145,146,148,150,151,152,153,161,162,163,165,180,181,183,189,190,193,195,],[-1,-5,-2,-4,-103,-18,-7,-3,-17,-82,-83,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,-102,-103,-103,-34,-36,-47,-51,-6,-8,-103,-31,-33,-14,-16,-87,-50,-25,-46,-103,-55,-10,-103,-103,-26,-15,-86,-27,-29,-30,-24,-35,-9,176,-97,-32,-28,-52,-11,-13,-103,-96,-12,]),'SEMI':([5,9,25,26,27,28,29,30,31,32,33,34,37,38,43,56,57,65,68,84,85,90,92,93,94,95,101,102,105,110,112,115,118,119,120,126,135,138,140,145,146,148,150,151,152,153,158,160,161,165,180,181,182,183,189,195,],[21,-7,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,-103,-103,-34,-36,-47,-51,131,-61,-23,-6,-8,-31,-33,-14,-16,-87,-50,-25,-46,-103,-55,-10,-103,-26,-15,-86,-27,-29,-30,-24,-35,131,-60,-9,-32,-28,-52,-59,-11,-13,-12,]),'NIL':([6,11,13,19,35,39,40,41,42,44,52,63,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,97,99,103,111,128,130,131,133,149,164,173,175,186,],[26,26,26,26,26,26,-79,-80,-81,26,26,26,26,26,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,26,26,26,26,26,26,-62,-63,26,26,26,26,26,26,]),'FALSE':([6,11,13,19,35,39,40,41,42,44,52,63,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,97,99,103,111,128,130,131,133,149,164,173,175,186,],[27,27,27,27,27,27,-79,-80,-81,27,27,27,27,27,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,27,27,27,27,27,27,-62,-63,27,27,27,27,27,27,]),'TRUE':([6,11,13,19,35,39,40,41,42,44,52,63,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,97,99,103,111,128,130,131,133,149,164,173,175,186,],[28,28,28,28,28,28,-79,-80,-81,28,28,28,28,28,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,28,28,28,28,28,28,-62,-63,28,28,28,28,28,28,]),'NUMBER':([6,11,13,19,35,39,40,41,42,44,52,63,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,97,99,103,111,128,130,131,133,149,164,173,175,186,],[29,29,29,29,29,29,-79,-80,-81,29,29,29,29,29,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,29,29,29,29,29,29,-62,-63,29,29,29,29,29,29,]),'STRING':([6,11,13,19,35,39,40,41,42,44,52,63,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,97,99,103,111,116,128,130,131,133,149,164,173,175,186,],[30,30,30,30,30,30,-79,-80,-81,30,30,30,30,30,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,30,30,30,30,30,151,30,-62,-63,30,30,30,30,30,30,]),'ELLIPSIS':([6,11,13,19,35,39,40,41,42,44,52,63,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,91,97,99,103,111,128,130,131,133,149,156,164,173,175,186,],[31,31,31,31,31,31,-79,-80,-81,31,31,31,31,31,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,125,31,31,31,31,31,31,-62,-63,31,31,171,31,31,31,31,]),'LBRACE':([6,11,13,19,35,39,40,41,42,44,52,63,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,97,99,103,111,116,128,130,131,133,149,164,173,175,186,],[39,39,39,39,39,39,-79,-80,-81,39,39,39,39,39,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,39,39,39,39,39,39,39,-62,-63,39,39,39,39,39,39,]),'MINUS':([6,11,13,19,25,26,27,28,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,47,49,52,61,63,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,93,97,99,103,111,115,117,118,119,120,126,128,130,131,132,133,135,137,140,148,149,150,151,152,160,164,173,175,178,180,181,182,184,186,191,],[40,40,40,40,70,-37,-38,-39,-40,-41,-42,-43,-44,-45,40,-48,-49,40,-79,-80,-81,-23,40,70,70,40,70,40,40,40,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,70,-51,40,70,-23,40,40,40,40,-50,70,-25,70,70,-55,40,-62,-63,70,40,70,70,-26,-27,40,-29,-30,-24,70,40,40,40,70,-28,-52,70,70,40,70,]),'NOT':([6,11,13,19,35,39,40,41,42,44,52,63,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,97,99,103,111,128,130,131,133,149,164,173,175,186,],[41,41,41,41,41,41,-79,-80,-81,41,41,41,41,41,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,41,41,41,41,41,41,-62,-63,41,41,41,41,41,41,]),'LEN':([6,11,13,19,35,39,40,41,42,44,52,63,66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,91,97,99,103,111,128,130,131,133,149,164,173,175,186,],[42,42,42,42,42,42,-79,-80,-81,42,42,42,42,42,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78,42,42,42,42,42,42,-62,-63,42,42,42,42,42,42,]),'ASSIGN':([8,15,18,43,50,56,57,58,60,93,101,102,113,118,138,147,152,159,165,],[44,-23,-103,-23,99,-103,111,-20,-22,133,-31,-33,-103,-25,-103,-21,-24,173,-32,]),'COLON':([9,15,18,20,33,37,38,43,54,93,106,108,113,114,115,118,126,140,144,148,150,151,152,168,180,],[-49,-23,-48,62,62,-48,-49,-23,-103,-23,142,-99,-48,62,-50,-25,-55,-26,-103,-27,-29,-30,-24,-98,-28,]),'LBRACK':([9,15,18,20,33,37,38,39,43,93,113,114,115,118,126,128,130,131,140,148,150,151,152,180,],[-49,-23,-48,63,63,-48,-49,91,-23,-23,-48,63,-50,-25,-55,91,-62,-63,-26,-27,-29,-30,-24,-28,]),'DOT':([9,15,18,20,33,37,38,43,54,93,113,114,115,118,126,140,144,148,150,151,152,180,],[-49,-23,-48,64,64,-48,-49,-23,107,-23,-48,64,-50,-25,-55,-26,107,-27,-29,-30,-24,-28,]),'COMMA':([15,18,25,26,27,28,29,30,31,32,33,34,37,38,43,50,56,84,85,90,92,93,101,102,113,115,118,119,120,124,126,137,138,140,148,150,151,152,158,160,165,178,180,181,182,],[-23,59,67,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,100,100,-47,-51,130,-61,-23,-31,-33,59,-50,-25,-46,67,156,-55,164,100,-26,-27,-29,-30,-24,130,-60,-32,186,-28,-52,-59,]),'RPAREN':([23,24,25,26,27,28,29,30,31,32,33,34,37,38,43,52,56,61,65,68,84,85,86,101,102,104,115,118,119,120,121,122,123,124,125,126,138,140,148,149,150,151,152,153,155,157,165,169,171,180,181,],[-82,-83,-103,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,-103,-103,115,-34,-36,-47,-51,-103,-31,-33,140,-50,-25,-46,-103,154,-90,-91,-103,-54,-55,-103,-26,-27,-103,-29,-30,-24,-35,-53,-95,-32,180,-94,-28,-52,]),'PLUS':([25,26,27,28,29,30,31,32,33,34,37,38,43,47,49,61,84,85,92,93,115,117,118,119,120,126,132,135,137,140,148,150,151,152,160,178,180,181,182,184,191,],[69,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,69,69,69,69,-51,69,-23,-50,69,-25,69,69,-55,69,69,69,-26,-27,-29,-30,-24,69,69,-28,-52,69,69,69,]),'TIMES':([25,26,27,28,29,30,31,32,33,34,37,38,43,47,49,61,84,85,92,93,115,117,118,119,120,126,132,135,137,140,148,150,151,152,160,178,180,181,182,184,191,],[71,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,71,71,71,71,-51,71,-23,-50,71,-25,71,71,-55,71,71,71,-26,-27,-29,-30,-24,71,71,-28,-52,71,71,71,]),'DIVIDE':([25,26,27,28,29,30,31,32,33,34,37,38,43,47,49,61,84,85,92,93,115,117,118,119,120,126,132,135,137,140,148,150,151,152,160,178,180,181,182,184,191,],[72,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,72,72,72,72,-51,72,-23,-50,72,-25,72,72,-55,72,72,72,-26,-27,-29,-30,-24,72,72,-28,-52,72,72,72,]),'POWER':([25,26,27,28,29,30,31,32,33,34,37,38,43,47,49,61,84,85,92,93,115,117,118,119,120,126,132,135,137,140,148,150,151,152,160,178,180,181,182,184,191,],[73,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,73,73,73,73,-51,73,-23,-50,73,-25,73,73,-55,73,73,73,-26,-27,-29,-30,-24,73,73,-28,-52,73,73,73,]),'MOD':([25,26,27,28,29,30,31,32,33,34,37,38,43,47,49,61,84,85,92,93,115,117,118,119,120,126,132,135,137,140,148,150,151,152,160,178,180,181,182,184,191,],[74,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,74,74,74,74,-51,74,-23,-50,74,-25,74,74,-55,74,74,74,-26,-27,-29,-30,-24,74,74,-28,-52,74,74,74,]),'CONCAT':([25,26,27,28,29,30,31,32,33,34,37,38,43,47,49,61,84,85,92,93,115,117,118,119,120,126,132,135,137,140,148,150,151,152,160,178,180,181,182,184,191,],[75,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,75,75,75,75,-51,75,-23,-50,75,-25,75,75,-55,75,75,75,-26,-27,-29,-30,-24,75,75,-28,-52,75,75,75,]),'LT':([25,26,27,28,29,30,31,32,33,34,37,38,43,47,49,61,84,85,92,93,115,117,118,119,120,126,132,135,137,140,148,150,151,152,160,178,180,181,182,184,191,],[76,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,76,76,76,76,-51,76,-23,-50,76,-25,76,76,-55,76,76,76,-26,-27,-29,-30,-24,76,76,-28,-52,76,76,76,]),'LE':([25,26,27,28,29,30,31,32,33,34,37,38,43,47,49,61,84,85,92,93,115,117,118,119,120,126,132,135,137,140,148,150,151,152,160,178,180,181,182,184,191,],[77,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,77,77,77,77,-51,77,-23,-50,77,-25,77,77,-55,77,77,77,-26,-27,-29,-30,-24,77,77,-28,-52,77,77,77,]),'GT':([25,26,27,28,29,30,31,32,33,34,37,38,43,47,49,61,84,85,92,93,115,117,118,119,120,126,132,135,137,140,148,150,151,152,160,178,180,181,182,184,191,],[78,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,78,78,78,78,-51,78,-23,-50,78,-25,78,78,-55,78,78,78,-26,-27,-29,-30,-24,78,78,-28,-52,78,78,78,]),'GE':([25,26,27,28,29,30,31,32,33,34,37,38,43,47,49,61,84,85,92,93,115,117,118,119,120,126,132,135,137,140,148,150,151,152,160,178,180,181,182,184,191,],[79,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,79,79,79,79,-51,79,-23,-50,79,-25,79,79,-55,79,79,79,-26,-27,-29,-30,-24,79,79,-28,-52,79,79,79,]),'EQ':([25,26,27,28,29,30,31,32,33,34,37,38,43,47,49,61,84,85,92,93,115,117,118,119,120,126,132,135,137,140,148,150,151,152,160,178,180,181,182,184,191,],[80,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,80,80,80,80,-51,80,-23,-50,80,-25,80,80,-55,80,80,80,-26,-27,-29,-30,-24,80,80,-28,-52,80,80,80,]),'NE':([25,26,27,28,29,30,31,32,33,34,37,38,43,47,49,61,84,85,92,93,115,117,118,119,120,126,132,135,137,140,148,150,151,152,160,178,180,181,182,184,191,],[81,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,81,81,81,81,-51,81,-23,-50,81,-25,81,81,-55,81,81,81,-26,-27,-29,-30,-24,81,81,-28,-52,81,81,81,]),'AND':([25,26,27,28,29,30,31,32,33,34,37,38,43,47,49,61,84,85,92,93,115,117,118,119,120,126,132,135,137,140,148,150,151,152,160,178,180,181,182,184,191,],[82,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,82,82,82,82,-51,82,-23,-50,82,-25,82,82,-55,82,82,82,-26,-27,-29,-30,-24,82,82,-28,-52,82,82,82,]),'OR':([25,26,27,28,29,30,31,32,33,34,37,38,43,47,49,61,84,85,92,93,115,117,118,119,120,126,132,135,137,140,148,150,151,152,160,178,180,181,182,184,191,],[83,-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,83,83,83,83,-51,83,-23,-50,83,-25,83,83,-55,83,83,83,-26,-27,-29,-30,-24,83,83,-28,-52,83,83,83,]),'THEN':([26,27,28,29,30,31,32,33,34,37,38,43,49,84,85,115,118,119,126,140,148,150,151,152,180,181,184,],[-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,98,-47,-51,-50,-25,-46,-55,-26,-27,-29,-30,-24,-28,-52,190,]),'RBRACE':([26,27,28,29,30,31,32,33,34,37,38,39,43,84,85,87,88,89,90,92,93,115,118,119,126,127,129,140,148,150,151,152,158,160,172,180,181,182,],[-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-103,-23,-47,-51,126,-88,-89,-103,-61,-23,-50,-25,-46,-55,-56,-58,-26,-27,-29,-30,-24,-103,-60,-57,-28,-52,-59,]),'RBRACK':([26,27,28,29,30,31,32,33,34,37,38,43,84,85,115,117,118,119,126,132,140,148,150,151,152,180,181,],[-37,-38,-39,-40,-41,-42,-43,-44,-45,-48,-49,-23,-47,-51,-50,152,-25,-46,-55,159,-26,-27,-29,-30,-24,-28,-52,]),'IN':([50,51,101,102,138,165,],[-103,103,-31,-33,-103,-32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'chunk':([0,10,12,96,98,154,166,176,190,192,],[1,46,46,46,46,46,46,46,46,46,]),'statlist':([0,10,12,96,98,154,166,176,190,192,],[2,2,2,2,2,2,2,2,2,2,]),'empty':([0,6,10,12,18,25,39,50,52,54,56,57,86,90,96,98,106,113,120,124,136,138,144,149,154,158,162,166,176,178,190,192,],[3,24,3,3,60,68,89,102,24,108,102,112,123,129,3,3,143,60,68,157,163,102,108,24,3,129,177,3,3,188,3,3,]),'laststat':([2,],[4,]),'stat':([2,],[5,]),'varlist':([2,],[8,]),'functioncall':([2,6,11,13,19,35,39,44,52,59,63,66,67,91,97,99,103,111,128,133,149,164,173,175,186,],[9,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'var':([2,6,11,13,19,35,39,44,52,59,63,66,67,91,97,99,103,111,128,133,149,164,173,175,186,],[18,37,37,37,37,37,37,37,37,113,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'prefixexp':([2,6,11,13,19,35,39,44,52,59,63,66,67,91,97,99,103,111,128,133,149,164,173,175,186,],[20,33,33,33,33,33,33,33,33,114,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'opt_explist':([6,52,149,],[22,104,169,]),'explist':([6,44,52,103,111,149,],[23,94,23,139,146,23,]),'exp':([6,11,13,19,35,39,44,52,63,66,67,91,97,99,103,111,128,133,149,164,173,175,186,],[25,47,49,61,84,92,25,25,117,119,120,132,135,137,25,25,92,160,25,178,182,184,191,]),'function':([6,11,13,19,35,39,44,52,63,66,67,91,97,99,103,111,128,133,149,164,173,175,186,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'tableconstructor':([6,11,13,19,35,39,44,52,63,66,67,91,97,99,103,111,116,128,133,149,164,173,175,186,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,150,34,34,34,34,34,34,34,]),'unop':([6,11,13,19,35,39,44,52,63,66,67,91,97,99,103,111,128,133,149,164,173,175,186,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'block':([10,12,96,98,154,166,176,190,192,],[45,48,134,136,170,179,185,193,194,]),'namelist':([14,17,86,],[51,57,124,]),'funcname':([16,],[53,]),'varlist_tail':([18,113,],[58,147,]),'exp_tail':([25,120,],[65,153,]),'binop':([25,47,49,61,84,92,117,119,120,132,135,137,160,178,182,184,191,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'funcbody':([36,53,109,],[85,105,145,]),'opt_fieldlist':([39,],[87,]),'fieldlist':([39,],[88,]),'field':([39,128,],[90,158,]),'namelist_tail':([50,56,138,],[101,101,165,]),'nameparts':([54,144,],[106,168,]),'opt_assign':([57,],[110,]),'opt_parlist':([86,],[121,]),'parlist':([86,],[122,]),'field_tail':([90,158,],[127,172,]),'fieldsep':([90,158,],[128,128,]),'opt_colon_name':([106,],[141,]),'args':([116,],[148,]),'opt_comma_ellipsis':([124,],[155,]),'elseiflist':([136,],[162,]),'opt_else':([162,],[174,]),'opt_comma_exp':([178,],[187,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> chunk","S'",1,None,None,None),
  ('chunk -> statlist','chunk',1,'p_chunk','ParserLexer.py',134),
  ('chunk -> statlist laststat','chunk',2,'p_chunk','ParserLexer.py',135),
  ('statlist -> statlist stat SEMI','statlist',3,'p_statlist','ParserLexer.py',139),
  ('statlist -> statlist stat','statlist',2,'p_statlist','ParserLexer.py',140),
  ('statlist -> empty','statlist',1,'p_statlist','ParserLexer.py',141),
  ('stat -> varlist ASSIGN explist','stat',3,'p_stat','ParserLexer.py',152),
  ('stat -> functioncall','stat',1,'p_stat','ParserLexer.py',153),
  ('stat -> DO block END','stat',3,'p_stat','ParserLexer.py',154),
  ('stat -> WHILE exp DO block END','stat',5,'p_stat','ParserLexer.py',155),
  ('stat -> REPEAT block UNTIL exp','stat',4,'p_stat','ParserLexer.py',156),
  ('stat -> IF exp THEN block elseiflist opt_else END','stat',7,'p_stat','ParserLexer.py',157),
  ('stat -> FOR NAME ASSIGN exp COMMA exp opt_comma_exp DO block END','stat',10,'p_stat','ParserLexer.py',158),
  ('stat -> FOR namelist IN explist DO block END','stat',7,'p_stat','ParserLexer.py',159),
  ('stat -> FUNCTION funcname funcbody','stat',3,'p_stat','ParserLexer.py',160),
  ('stat -> LOCAL FUNCTION NAME funcbody','stat',4,'p_stat','ParserLexer.py',161),
  ('stat -> LOCAL namelist opt_assign','stat',3,'p_stat','ParserLexer.py',162),
  ('laststat -> RETURN opt_explist','laststat',2,'p_laststat','ParserLexer.py',175),
  ('laststat -> BREAK','laststat',1,'p_laststat','ParserLexer.py',176),
  ('funcname -> NAME nameparts opt_colon_name','funcname',3,'p_funcname','ParserLexer.py',179),
  ('varlist -> var varlist_tail','varlist',2,'p_varlist','ParserLexer.py',183),
  ('varlist_tail -> COMMA var varlist_tail','varlist_tail',3,'p_varlist_tail','ParserLexer.py',187),
  ('varlist_tail -> empty','varlist_tail',1,'p_varlist_tail','ParserLexer.py',188),
  ('var -> NAME','var',1,'p_var','ParserLexer.py',192),
  ('var -> prefixexp LBRACK exp RBRACK','var',4,'p_var','ParserLexer.py',193),
  ('var -> prefixexp DOT NAME','var',3,'p_var','ParserLexer.py',194),
  ('functioncall -> NAME LPAREN opt_explist RPAREN','functioncall',4,'p_functioncall','ParserLexer.py',200),
  ('functioncall -> prefixexp COLON NAME args','functioncall',4,'p_functioncall','ParserLexer.py',201),
  ('args -> LPAREN opt_explist RPAREN','args',3,'p_args','ParserLexer.py',209),
  ('args -> tableconstructor','args',1,'p_args','ParserLexer.py',210),
  ('args -> STRING','args',1,'p_args','ParserLexer.py',211),
  ('namelist -> NAME namelist_tail','namelist',2,'p_namelist','ParserLexer.py',214),
  ('namelist_tail -> COMMA NAME namelist_tail','namelist_tail',3,'p_namelist_tail','ParserLexer.py',218),
  ('namelist_tail -> empty','namelist_tail',1,'p_namelist_tail','ParserLexer.py',219),
  ('explist -> exp exp_tail','explist',2,'p_explist','ParserLexer.py',223),
  ('exp_tail -> COMMA exp exp_tail','exp_tail',3,'p_exp_tail','ParserLexer.py',227),
  ('exp_tail -> empty','exp_tail',1,'p_exp_tail','ParserLexer.py',228),
  ('exp -> NIL','exp',1,'p_exp','ParserLexer.py',232),
  ('exp -> FALSE','exp',1,'p_exp','ParserLexer.py',233),
  ('exp -> TRUE','exp',1,'p_exp','ParserLexer.py',234),
  ('exp -> NUMBER','exp',1,'p_exp','ParserLexer.py',235),
  ('exp -> STRING','exp',1,'p_exp','ParserLexer.py',236),
  ('exp -> ELLIPSIS','exp',1,'p_exp','ParserLexer.py',237),
  ('exp -> function','exp',1,'p_exp','ParserLexer.py',238),
  ('exp -> prefixexp','exp',1,'p_exp','ParserLexer.py',239),
  ('exp -> tableconstructor','exp',1,'p_exp','ParserLexer.py',240),
  ('exp -> exp binop exp','exp',3,'p_exp','ParserLexer.py',241),
  ('exp -> unop exp','exp',2,'p_exp','ParserLexer.py',242),
  ('prefixexp -> var','prefixexp',1,'p_prefixexp','ParserLexer.py',246),
  ('prefixexp -> functioncall','prefixexp',1,'p_prefixexp','ParserLexer.py',247),
  ('prefixexp -> LPAREN exp RPAREN','prefixexp',3,'p_prefixexp','ParserLexer.py',248),
  ('function -> FUNCTION funcbody','function',2,'p_function','ParserLexer.py',251),
  ('funcbody -> LPAREN opt_parlist RPAREN block END','funcbody',5,'p_funcbody','ParserLexer.py',254),
  ('parlist -> namelist opt_comma_ellipsis','parlist',2,'p_parlist','ParserLexer.py',257),
  ('parlist -> ELLIPSIS','parlist',1,'p_parlist','ParserLexer.py',258),
  ('tableconstructor -> LBRACE opt_fieldlist RBRACE','tableconstructor',3,'p_tableconstructor','ParserLexer.py',261),
  ('fieldlist -> field field_tail','fieldlist',2,'p_fieldlist','ParserLexer.py',264),
  ('field_tail -> fieldsep field field_tail','field_tail',3,'p_field_tail','ParserLexer.py',267),
  ('field_tail -> empty','field_tail',1,'p_field_tail','ParserLexer.py',268),
  ('field -> LBRACK exp RBRACK ASSIGN exp','field',5,'p_field','ParserLexer.py',272),
  ('field -> NAME ASSIGN exp','field',3,'p_field','ParserLexer.py',273),
  ('field -> exp','field',1,'p_field','ParserLexer.py',274),
  ('fieldsep -> COMMA','fieldsep',1,'p_fieldsep','ParserLexer.py',277),
  ('fieldsep -> SEMI','fieldsep',1,'p_fieldsep','ParserLexer.py',278),
  ('binop -> PLUS','binop',1,'p_binop','ParserLexer.py',281),
  ('binop -> MINUS','binop',1,'p_binop','ParserLexer.py',282),
  ('binop -> TIMES','binop',1,'p_binop','ParserLexer.py',283),
  ('binop -> DIVIDE','binop',1,'p_binop','ParserLexer.py',284),
  ('binop -> POWER','binop',1,'p_binop','ParserLexer.py',285),
  ('binop -> MOD','binop',1,'p_binop','ParserLexer.py',286),
  ('binop -> CONCAT','binop',1,'p_binop','ParserLexer.py',287),
  ('binop -> LT','binop',1,'p_binop','ParserLexer.py',288),
  ('binop -> LE','binop',1,'p_binop','ParserLexer.py',289),
  ('binop -> GT','binop',1,'p_binop','ParserLexer.py',290),
  ('binop -> GE','binop',1,'p_binop','ParserLexer.py',291),
  ('binop -> EQ','binop',1,'p_binop','ParserLexer.py',292),
  ('binop -> NE','binop',1,'p_binop','ParserLexer.py',293),
  ('binop -> AND','binop',1,'p_binop','ParserLexer.py',294),
  ('binop -> OR','binop',1,'p_binop','ParserLexer.py',295),
  ('unop -> MINUS','unop',1,'p_unop','ParserLexer.py',298),
  ('unop -> NOT','unop',1,'p_unop','ParserLexer.py',299),
  ('unop -> LEN','unop',1,'p_unop','ParserLexer.py',300),
  ('opt_explist -> explist','opt_explist',1,'p_opt_explist','ParserLexer.py',303),
  ('opt_explist -> empty','opt_explist',1,'p_opt_explist','ParserLexer.py',304),
  ('opt_comma_exp -> COMMA exp','opt_comma_exp',2,'p_opt_comma_exp','ParserLexer.py',308),
  ('opt_comma_exp -> empty','opt_comma_exp',1,'p_opt_comma_exp','ParserLexer.py',309),
  ('opt_assign -> ASSIGN explist','opt_assign',2,'p_opt_assign','ParserLexer.py',313),
  ('opt_assign -> empty','opt_assign',1,'p_opt_assign','ParserLexer.py',314),
  ('opt_fieldlist -> fieldlist','opt_fieldlist',1,'p_opt_fieldlist','ParserLexer.py',317),
  ('opt_fieldlist -> empty','opt_fieldlist',1,'p_opt_fieldlist','ParserLexer.py',318),
  ('opt_parlist -> parlist','opt_parlist',1,'p_opt_parlist','ParserLexer.py',321),
  ('opt_parlist -> empty','opt_parlist',1,'p_opt_parlist','ParserLexer.py',322),
  ('opt_else -> ELSE block','opt_else',2,'p_opt_else','ParserLexer.py',325),
  ('opt_else -> empty','opt_else',1,'p_opt_else','ParserLexer.py',326),
  ('opt_comma_ellipsis -> COMMA ELLIPSIS','opt_comma_ellipsis',2,'p_opt_comma_ellipsis','ParserLexer.py',329),
  ('opt_comma_ellipsis -> empty','opt_comma_ellipsis',1,'p_opt_comma_ellipsis','ParserLexer.py',330),
  ('elseiflist -> elseiflist ELSEIF exp THEN block','elseiflist',5,'p_elseiflist','ParserLexer.py',333),
  ('elseiflist -> empty','elseiflist',1,'p_elseiflist','ParserLexer.py',334),
  ('nameparts -> DOT NAME nameparts','nameparts',3,'p_nameparts','ParserLexer.py',337),
  ('nameparts -> empty','nameparts',1,'p_nameparts','ParserLexer.py',338),
  ('opt_colon_name -> COLON NAME','opt_colon_name',2,'p_opt_colon_name','ParserLexer.py',341),
  ('opt_colon_name -> empty','opt_colon_name',1,'p_opt_colon_name','ParserLexer.py',342),
  ('block -> chunk','block',1,'p_block','ParserLexer.py',345),
  ('empty -> <empty>','empty',0,'p_empty','ParserLexer.py',348),
]
